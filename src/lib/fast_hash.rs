extern crate fasthash;

use std::path::Path;

use fasthash::HasherExt;
use fasthash::murmur3;
use fasthash::StreamHasher;

use super::fs;

pub fn hash_file<F: fs::Fs>(fs: &F, path: &Path) -> std::io::Result<u128> {
    let mut file = fs.open(path)?;
    let mut hasher: murmur3::Hasher128_x64 = Default::default();
    StreamHasher::write_stream(&mut hasher, &mut file)?;
    // hasher.write_stream(&mut file)?;
    Ok(hasher.finish_ext())
}

pub fn hash_to_hex_str(hash: u128) -> String {
    format!("{:032X}", hash)
}


#[cfg(test)]
mod test {
    use crate::lib::fast_hash::hash_to_hex_str;

    use super::fs::TestFs;
    use super::hash_file;
    use super::Path;

    #[test]
    fn test_hash_to_string() {
        assert_eq!(hash_to_hex_str(204797213367049729698754624420042367389), "9A128231F9BD4D82AC7D28CC74BDE19D");
        // to make sure it zero pads
        assert_eq!(hash_to_hex_str(0), "00000000000000000000000000000000");
    }

    #[test]
    fn test_hash_file() {
        let mut test_fs = TestFs::default();

        test_fs.add_text_file("filepath", "test");
        assert_eq!(hash_file(&test_fs, Path::new("filepath")).unwrap(), 204797213367049729698754624420042367389u128);


        test_fs.add_binary_file("binfile", [
            0x72, 0x78, 0xe2, 0x11, 0xe4, 0x71, 0xd3, 0x0f, 0xab, 0xb3, 0xed, 0x17,
            0x8c, 0x7e, 0x65, 0x1c, 0xe5, 0x66, 0xc4, 0x4e, 0xd4, 0xec, 0xb2, 0x02,
            0xfc, 0x83, 0x1c, 0x00, 0x62, 0xff, 0x37, 0x50, 0x38, 0x7e, 0xe7, 0x12,
            0x7e, 0x74, 0x9d, 0x3f, 0x26, 0x88, 0x1d, 0x58, 0x83, 0x63, 0xec, 0x23,
            0xe0, 0xdd, 0x87, 0x8a, 0xd4, 0xa9, 0xb6, 0xe9, 0x30, 0x9b, 0xbe, 0xfb,
            0xbd, 0x5c, 0x79, 0x78, 0x56, 0x07, 0xa0, 0x5d, 0x7c, 0xd7, 0xb6, 0xb7,
            0x8b, 0xca, 0x36, 0xfe, 0x27, 0xe0, 0x9c, 0x27, 0xb3, 0xa1, 0x40, 0xf3,
            0x95, 0x45, 0x01, 0x18, 0xa5, 0xb1, 0x82, 0x7c, 0xf0, 0xda, 0x30, 0x90,
            0x82, 0x7f, 0xe6, 0x3d, 0x5e, 0x18, 0xc1, 0x5b, 0x77, 0xc6, 0x78, 0x55,
            0x10, 0xd2, 0x7a, 0xb6, 0xe3, 0x97, 0xed, 0x05, 0xb8, 0x8d, 0xcb, 0x35,
            0x46, 0x24, 0xc5, 0x6b, 0x42, 0xc9, 0xaf, 0xb9, 0x90, 0x79, 0x51, 0xc0
        ].as_ref().into());
        assert_eq!(hash_file(&test_fs, Path::new("binfile")).unwrap(), 183532777391455286795891469695941709856);


        assert!(hash_file(&test_fs, Path::new("missingfile")).is_err());
    }
}
